"""
Django settings for Web project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import platform

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '#)l%onoowjd$(+gl=g&s#sh!u@_2htwaf1^njip(y9)z$syz%m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Web',
    'rest',
    'rest_framework',
    'login',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Web.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
MYSQL_HOST = "192.168.115.52"
MYSQL_USER = "root"
MYSQL_PASSWORD = "admin123"
MYSQL_DB = "hc_db"

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': MYSQL_DB,
        'USER': MYSQL_USER,
        'PASSWORD': MYSQL_PASSWORD,
        'HOST': MYSQL_HOST,
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")
if platform.system() == "Linux":
    STORAGE_PATH = "/hcs"
elif platform.system() == "Windows":
    STORAGE_PATH = "\\\hcs"
else:
    STORAGE_PATH = None
CASE_STORAGE = os.path.join(STORAGE_PATH, 'case')
RESULT_DIR = os.path.join(STORAGE_PATH, "result")
OUTPUT_DIR = os.path.join(RESULT_DIR, "web")
if not os.path.exists(OUTPUT_DIR):
    os.makedirs(OUTPUT_DIR)

STATICFILES_DIRS = [
    ("adminlte", os.path.join(STATIC_ROOT, 'theme')),
    ("js", os.path.join(STATIC_ROOT, 'js')),
    ("output", os.path.join(STATIC_ROOT, 'output')),
    ("result", RESULT_DIR),
    ("web", os.path.join(OUTPUT_DIR))
]

sysstr = platform.system()
HOME_PATH = ""
if sysstr.lower() == "linux":
    HOME_PATH = os.environ['HOME']
elif sysstr == "Windows":
    HOME_PATH = os.environ['TEMP']
else:
    HOME_PATH = os.path.dirname(BASE_DIR)

CASE_DIR = os.path.join(HOME_PATH, "case_saving")
if not os.path.exists(CASE_DIR):
    os.mkdir(CASE_DIR)

